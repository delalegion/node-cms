<%- contentFor('content') %>

<div class="uk-container uk-container-xsmall">
    <div class="uk-flex uk-margin-medium-top uk-margin-bottom">
        <div class="uk-flex uk-flex-row uk-flex-middle uk-card-icon-box">
            <div class="uk-card-icon"><span class="material-symbols-outlined">
                visibility
                </span></div>
            <div class="uk-card-icon-text uk-flex uk-flex-column">
                <h4>4441</h4>
                <span>Wy≈õwietle≈Ñ</span>
            </div>
        </div>
        <div class="uk-flex uk-flex-row uk-flex-middle uk-card-icon-box">
            <div class="uk-card-icon"><span class="material-symbols-outlined">
                calendar_month
                </span></div>
            <div class="uk-card-icon-text uk-flex uk-flex-column">
                <h4>10.02.2022</h4>
                <span>Data utworzenia</span>
            </div>
        </div>
    </div>
    <% if (errors) { %>
        <div class="uk-alert-danger" uk-alert>
            <div class="alert-icon alert-icon-danger"><span class="material-symbols-outlined">error</span></div>
            <p><%= __('form.error') %></p>
        </div>
    <% } %>
        <form method="POST" id="form">
            <div class="uk-card-box uk-margin-top">
                <div class="block">
                    <label>
                        <span class="uk-form-label"><%= __('form.title') %></span>
                        <!-- Using form state modifers, the classes can be identical for every input -->
                        <input value="<%= form.title %>" type="text" placeholder="<%= __('form.title') %>..." name="title" id="co" class="uk-input <% if (errors?.title) { %> uk-input-danger <% } %>"/>
                        <% if (errors?.title) { %>
                            <div class="uk-alert-danger uk-margin-remove-top" uk-alert>
                                <p><%= __('errors.projects.slug.minLength') %></p>
                            </div>
                        <% } %>
                    </label>
                </div>
                <div class="block uk-margin-top">
                    <label>
                        <span class="uk-form-label"><%= __('form.slug') %></span>
                        <!-- Using form state modifers, the classes can be identical for every input -->
                        <input value="<%= form.slug %>" type="text" placeholder="<%= __('form.slug') %>..." name="slug" class="uk-input <% if (errors?.slug) { %> uk-input-danger <% } %>"/>
                        <% if (errors?.slug) { %>
                            <div class="uk-alert-danger uk-margin-remove-top" uk-alert>
                                <p><%= __('errors.projects.slug.minLength') %></p>
                            </div>
                        <% } %>
                    </label>
                </div>
                <div class="block uk-margin-top">
                    <label>
                        <span class="uk-form-label"><%= __('form.client') %></span>
                        <!-- Using form state modifers, the classes can be identical for every input -->
                        <input value="<%= form.client %>" type="text" placeholder="<%= __('form.client') %>..." name="client" class="uk-input <% if (errors?.client) { %> uk-input-danger <% } %>"/>
                        <% if (errors?.client) { %>
                            <div class="uk-alert-danger uk-margin-remove-top" uk-alert>
                                <p><%= __(errors?.client.message) %></p>
                            </div>
                        <% } %>
                    </label>
                </div>
                <div class="block uk-margin-top">
                    <label>
                        <span class="uk-form-label"><%= __('form.description') %></span>
                        <!-- Using form state modifers, the classes can be identical for every input -->
                        <textarea value="<%= form.description %>" rows="5" type="textarea" placeholder="Opis projektu" name="description" class="uk-input <% if (errors?.description) { %> uk-input-danger <% } %>"></textarea>
                        <% if (errors?.description) { %>
                            <div class="uk-alert-danger uk-margin-remove-top uk-margin-remove-bottom" uk-alert>
                                <p><%= __(errors?.description.message) %></p>
                            </div>
                        <% } %>
                    </label>
                </div>
            </div>
            <div class="uk-card-box uk-margin-top">
                <div class="block uk-margin-top">
                    <label>
                        <span class="uk-form-label"><%= __('form.tools') %></span>
                        <!-- Using form state modifers, the classes can be identical for every input -->
                        <div class="uk-flex uk-flex-row">
                            <input id="skillsInput" type="text" placeholder="<%= __('form.tools') %>..." name="skillsInput" class="uk-input" />
                            <button type="button" class="uk-button uk-button-secondary uk-margin-left" id="skillsButton">
                                DODAJ
                            </button>
                        </div>
                        <div class="uk-flex uk-margin-small-top uk-badges-container">
                        </div>
                        <% if (errors?.tools) { %>
                            <div class="uk-alert-danger uk-margin-remove-top uk-margin-remove-bottom" uk-alert>
                                <p><%= __(errors?.tools.message) %></p>
                            </div>
                        <% } %>
                    </label>
                </div>
                <!-- INPUT FOR TOOLS DATA -->
                <input id="toolsInput" type="hidden" name="tools" />
            </div>
            <button type="submit" class="uk-button uk-button-primary uk-margin-top" id="projectButton">
                <%= __('profiles.editUser') %>
            </button>
        </form>    
</div>

<script>

    const skillsButton = document.querySelector('#skillsButton');
    const skillsContainer = document.querySelector('.uk-badges-container');
    const skillsInput = document.querySelector('#toolsInput');

    function useState(defaultValue) {
        // üëÜüèªWe create a function useState with a default value
        let value = defaultValue;
        // üëÜüèªWe create a local variable value = defaultValue
        function getValue() {
            // üëÜüèªWe create a function getValue to get the value that return the value
            return value;
        }
        function setValue(newValue) {
            // üëÜüèªWe create a function to set the value with parameter newValue
            value = newValue; // üëàüèª We change the value for newValue
            addToInput(); // üëàüèªWe run the render function on our app
        }
        return [getValue, setValue];
    }

    const [skillsArrayValues, setSkillsArrayValues] = useState([]);
    const [skillsArray, setSkillsArray] = useState([]);

    document.querySelector('#skillsInput').addEventListener("keydown", function(event) {
        if (event.which === 13) {
            event.preventDefault();
            addSkill();
        }
    })

    skillsButton.addEventListener('click', function(e) {
        addSkill();
    })

    const addSkill = () => {
        let skillsInput = document.querySelector('#skillsInput').value;
        // Add input value to array's
        if (skillsInput.length > 0) 
        {
            setSkillsArrayValues([...skillsArrayValues(), skillsInput]);
            // Create new badge and push to badges array
            newBadge(skillsInput);
            // Add badge to input value
            addDestroyButton();
            document.querySelector('#skillsInput').value = "";
        }
    }

    
    const newBadge = (e) => {
        // Create html badge item
            // Create div
            const badgeItem = document.createElement("div");
            // Add classname
            badgeItem.className = 'uk-badge-item';
            badgeItem.setAttribute('id', e);
            // Add value from input
            const badgeText = document.createTextNode(e);
            // Create destroy button
            const destroyButton = document.createElement("span");
            // Add classname to button
            destroyButton.className = 'material-symbols-outlined';
            destroyButton.setAttribute("id", "destroyButton");
            // Add icon to button
            const destroyText = document.createTextNode('cancel');
            destroyButton.append(destroyText);
            // Append text to badge
            badgeItem.append(badgeText);
            badgeItem.append(destroyButton);
            // Push badge to array
            setSkillsArray([...skillsArray(), {
                "name": e,
                "value": badgeItem
            }]);
            // Add badge to container to show in html
            addToContainer(badgeItem);
    }

    const addToContainer = (badgeItem) => {
        skillsContainer.appendChild(badgeItem);
    }

    const addDestroyButton = () => {
        const skillsDestroyButton = document.querySelectorAll("#destroyButton")
        skillsDestroyButton.forEach((e) => {
            e.addEventListener('click', function(event) {
                // Get id of clicked element
                const element = event.target.parentNode;
                const elementid = element.getAttribute('id');

                // Find element in array and remove it
                for (let i=0;i<skillsArray().length;i++) {
                    if (skillsArray()[i].name == elementid) {
                        skillsArray()[i].value.remove();
                        skillsArray().splice(i, 1)
                        setSkillsArray(skillsArray());
                        skillsArrayValues().splice(i, 1)
                        setSkillsArrayValues(skillsArrayValues());
                    }
                }

                // Remove element from DOM
                // element.remove();
            })
        })
    }

    const addToInput = () => {
        if (skillsArrayValues().length > 0) {
            skillsInput.value = skillsArrayValues().join()
        }
    }

</script>